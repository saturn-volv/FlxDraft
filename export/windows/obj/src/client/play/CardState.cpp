// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_client_play_CardState
#include <client/play/CardState.h>
#endif
#ifndef INCLUDED_client_play_game_pieces_CardSprite
#include <client/play/game_pieces/CardSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_scryfall_Card
#include <scryfall/Card.h>
#endif
#ifndef INCLUDED_scryfall_Result
#include <scryfall/Result.h>
#endif
#ifndef INCLUDED_server_play_Game
#include <server/play/Game.h>
#endif
#ifndef INCLUDED_server_play_board_cards_BoosterPack
#include <server/play/board/cards/BoosterPack.h>
#endif
#ifndef INCLUDED_server_user_User
#include <server/user/User.h>
#endif
#ifndef INCLUDED_server_user_player_Player
#include <server/user/player/Player.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_00c9e914cea35c28_16_new,"client.play.CardState","new",0xe21d4bbc,"client.play.CardState.new","client/play/CardState.hx",16,0xd9baeb94)
HX_LOCAL_STACK_FRAME(_hx_pos_00c9e914cea35c28_24_create,"client.play.CardState","create",0xa7f46d20,"client.play.CardState.create","client/play/CardState.hx",24,0xd9baeb94)
HX_LOCAL_STACK_FRAME(_hx_pos_00c9e914cea35c28_44_addCard,"client.play.CardState","addCard",0xba77b9ed,"client.play.CardState.addCard","client/play/CardState.hx",44,0xd9baeb94)
HX_LOCAL_STACK_FRAME(_hx_pos_00c9e914cea35c28_53_update,"client.play.CardState","update",0xb2ea8c2d,"client.play.CardState.update","client/play/CardState.hx",53,0xd9baeb94)
HX_LOCAL_STACK_FRAME(_hx_pos_00c9e914cea35c28_57_update,"client.play.CardState","update",0xb2ea8c2d,"client.play.CardState.update","client/play/CardState.hx",57,0xd9baeb94)
HX_LOCAL_STACK_FRAME(_hx_pos_00c9e914cea35c28_68_update,"client.play.CardState","update",0xb2ea8c2d,"client.play.CardState.update","client/play/CardState.hx",68,0xd9baeb94)
HX_LOCAL_STACK_FRAME(_hx_pos_00c9e914cea35c28_17_boot,"client.play.CardState","boot",0xef9df956,"client.play.CardState.boot","client/play/CardState.hx",17,0xd9baeb94)
HX_LOCAL_STACK_FRAME(_hx_pos_00c9e914cea35c28_18_boot,"client.play.CardState","boot",0xef9df956,"client.play.CardState.boot","client/play/CardState.hx",18,0xd9baeb94)
namespace client{
namespace play{

void CardState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_00c9e914cea35c28_16_new)
HXDLIN(  16)		super::__construct();
            	}

Dynamic CardState_obj::__CreateEmpty() { return new CardState_obj; }

void *CardState_obj::_hx_vtable = 0;

Dynamic CardState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CardState_obj > _hx_result = new CardState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CardState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x06a740be) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x06a740be;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void CardState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_00c9e914cea35c28_24_create)
HXLINE(  25)		this->super::create();
HXLINE(  26)		this->set_bgColor(-12771027);
HXLINE(  27)		this->cards =  ::flixel::group::FlxTypedSpriteGroup_obj::__alloc( HX_CTX ,25,25,null());
HXLINE(  28)		this->add(this->cards);
HXLINE(  30)		 ::server::play::Game_obj::__alloc( HX_CTX ,HX_("mh3",78,10,53,00));
HXLINE(  31)		::Array< ::Dynamic> players = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  32)		{
HXLINE(  32)			::String name = HX_("debug_user",f7,0e,75,6c);
HXLINE(  33)			players->push( ::server::user::player::Player_obj::__alloc( HX_CTX , ::server::user::User_obj::__alloc( HX_CTX ,name)));
            		}
HXLINE(  37)		{
HXLINE(  37)			int _g = 0;
HXDLIN(  37)			::Array< ::Dynamic> _g1 = players->__get(0).StaticCast<  ::server::user::player::Player >()->boosterPacks->__get(0).StaticCast<  ::server::play::board::cards::BoosterPack >()->cardsInside;
HXDLIN(  37)			while((_g < _g1->length)){
HXLINE(  37)				 ::scryfall::Card card = _g1->__get(_g).StaticCast<  ::scryfall::Card >();
HXDLIN(  37)				_g = (_g + 1);
HXLINE(  38)				this->addCard(card);
            			}
            		}
HXLINE(  40)		this->selectedCard = ::client::play::game_pieces::CardSprite_obj::generateShowcaseCard(Dynamic( this->cards->group->members->__get(0)).StaticCast<  ::client::play::game_pieces::CardSprite >());
HXLINE(  41)		this->add(this->selectedCard);
            	}


 ::client::play::game_pieces::CardSprite CardState_obj::addCard( ::scryfall::Card card){
            	HX_GC_STACKFRAME(&_hx_pos_00c9e914cea35c28_44_addCard)
HXLINE(  45)		 ::client::play::game_pieces::CardSprite spr =  ::client::play::game_pieces::CardSprite_obj::__alloc( HX_CTX ,card,null());
HXLINE(  47)		spr->set__gameIndex(this->cards->group->length);
HXLINE(  48)		this->cards->add(spr).StaticCast<  ::client::play::game_pieces::CardSprite >();
HXLINE(  50)		return spr;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CardState_obj,addCard,return )

void CardState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_00c9e914cea35c28_53_update)
HXLINE(  54)		this->super::update(elapsed);
HXLINE(  56)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  56)		if (_this->keyManager->checkStatusUnsafe(116,_this->status)) {
HXLINE(  57)			bool _hx_tmp;
HXDLIN(  57)			if (::hx::IsNotNull( ::flixel::FlxG_obj::game->_state )) {
HXLINE(  57)				_hx_tmp = ::hx::IsNull( ::flixel::FlxG_obj::game->_state->_constructor );
            			}
            			else {
HXLINE(  57)				_hx_tmp = true;
            			}
HXDLIN(  57)			if (_hx_tmp) {
HXLINE(  57)				::flixel::FlxG_obj::log->advanced(HX_("FlxG.resetState was called while switching states",8a,c3,6d,a7),::flixel::_hx_system::debug::log::LogStyle_obj::ERROR,true);
            			}
            			else {
HXLINE(  57)				if (!(::Std_obj::isOfType(::flixel::FlxG_obj::game->_state->_constructor,::hx::ClassOf< ::flixel::FlxState >()))) {
HXLINE(  57)					 ::Dynamic nextState = ::flixel::FlxG_obj::game->_state->_constructor;
HXDLIN(  57)					 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  57)					bool _hx_tmp1;
HXDLIN(  57)					if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  57)						_hx_tmp1 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            					}
            					else {
HXLINE(  57)						_hx_tmp1 = true;
            					}
HXDLIN(  57)					if (_hx_tmp1) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            						void _hx_run(){
            							HX_STACKFRAME(&_hx_pos_00c9e914cea35c28_57_update)
HXLINE(  57)							if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  57)								::flixel::FlxG_obj::game->_nextState = nextState;
            							}
            							else {
HXLINE(  57)								::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(  57)						::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_0(nextState,stateOnCall)));
            					}
            				}
            				else {
HXLINE(  57)					 ::Dynamic nextState1 = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromState(( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) ));
HXDLIN(  57)					 ::flixel::FlxState stateOnCall1 = ::flixel::FlxG_obj::game->_state;
HXDLIN(  57)					bool _hx_tmp2;
HXDLIN(  57)					if (::Std_obj::isOfType(nextState1,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  57)						_hx_tmp2 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState1) ));
            					}
            					else {
HXLINE(  57)						_hx_tmp2 = true;
            					}
HXDLIN(  57)					if (_hx_tmp2) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState1, ::flixel::FlxState,stateOnCall1) HXARGC(0)
            						void _hx_run(){
            							HX_STACKFRAME(&_hx_pos_00c9e914cea35c28_57_update)
HXLINE(  57)							if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall1 )) {
HXLINE(  57)								::flixel::FlxG_obj::game->_nextState = nextState1;
            							}
            							else {
HXLINE(  57)								::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(  57)						::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState1,stateOnCall1)));
            					}
            				}
            			}
            		}
HXLINE(  61)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  61)		{
HXLINE(  61)			int _g1 = 0;
HXDLIN(  61)			::Array< ::Dynamic> _g2 = this->cards->group->members;
HXDLIN(  61)			while((_g1 < _g2->length)){
HXLINE(  61)				 ::client::play::game_pieces::CardSprite v = _g2->__get(_g1).StaticCast<  ::client::play::game_pieces::CardSprite >();
HXDLIN(  61)				_g1 = (_g1 + 1);
HXDLIN(  61)				if (v->hovering) {
HXLINE(  61)					_g->push(v);
            				}
            			}
            		}
HXDLIN(  61)		::Array< ::Dynamic> hoverFilter = _g;
HXLINE(  62)		{
HXLINE(  62)			int _g3 = 0;
HXDLIN(  62)			::Array< ::Dynamic> _g4 = this->cards->group->members;
HXDLIN(  62)			while((_g3 < _g4->length)){
HXLINE(  62)				 ::client::play::game_pieces::CardSprite card = _g4->__get(_g3).StaticCast<  ::client::play::game_pieces::CardSprite >();
HXDLIN(  62)				_g3 = (_g3 + 1);
HXLINE(  63)				bool _hx_tmp3;
HXDLIN(  63)				if (::flixel::FlxG_obj::mouse->overlaps(card,null())) {
HXLINE(  63)					if ((hoverFilter->length > 0)) {
HXLINE(  63)						_hx_tmp3 = hoverFilter->contains(card);
            					}
            					else {
HXLINE(  63)						_hx_tmp3 = true;
            					}
            				}
            				else {
HXLINE(  63)					_hx_tmp3 = false;
            				}
HXDLIN(  63)				if (_hx_tmp3) {
HXLINE(  64)					card->onHover();
            				}
            				else {
HXLINE(  66)					card->offHover();
            				}
            			}
            		}
HXLINE(  68)		{
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(3)
            			int _hx_run(int i, ::client::play::game_pieces::CardSprite a, ::client::play::game_pieces::CardSprite b){
            				HX_STACKFRAME(&_hx_pos_00c9e914cea35c28_68_update)
HXLINE(  69)				Float Value1;
HXDLIN(  69)				if (a->hovering) {
HXLINE(  69)					Value1 = ( (Float)(1) );
            				}
            				else {
HXLINE(  69)					Value1 = ( (Float)(0) );
            				}
HXDLIN(  69)				Float Value2;
HXDLIN(  69)				if (b->hovering) {
HXLINE(  69)					Value2 = ( (Float)(1) );
            				}
            				else {
HXLINE(  69)					Value2 = ( (Float)(0) );
            				}
HXDLIN(  69)				int result = 0;
HXDLIN(  69)				if ((Value1 < Value2)) {
HXLINE(  69)					result = i;
            				}
            				else {
HXLINE(  69)					if ((Value1 > Value2)) {
HXLINE(  69)						result = -(i);
            					}
            				}
HXDLIN(  69)				return result;
            			}
            			HX_END_LOCAL_FUNC3(return)

            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3,int,a1, ::Dynamic,_g5) HXARGC(2)
            			int _hx_run( ::client::play::game_pieces::CardSprite a2, ::client::play::game_pieces::CardSprite a3){
            				HX_STACKFRAME(&_hx_pos_00c9e914cea35c28_68_update)
HXLINE(  68)				return ( (int)(_g5(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(  68)			 ::Dynamic _g5 =  ::Dynamic(new _hx_Closure_2());
HXDLIN(  68)			int a1 = -1;
HXDLIN(  68)			 ::Dynamic _hx_tmp4 =  ::Dynamic(new _hx_Closure_3(a1,_g5));
HXDLIN(  68)			this->cards->group->members->sort(_hx_tmp4);
            		}
HXLINE(  72)		if ((hoverFilter->length > 0)) {
HXLINE(  73)			this->selectedCard->loadGraphicFromSprite(hoverFilter->__get(0).StaticCast<  ::client::play::game_pieces::CardSprite >());
HXLINE(  74)			this->selectedCard->setGraphicSize((::client::play::game_pieces::CardSprite_obj::cardWidth * ((Float)2.2)),null());
HXLINE(  75)			this->selectedCard->updateHitbox();
HXLINE(  76)			 ::client::play::game_pieces::CardSprite _hx_tmp5 = this->selectedCard;
HXDLIN(  76)			int _hx_tmp6 = ::flixel::FlxG_obj::width;
HXDLIN(  76)			_hx_tmp5->set_x((( (Float)(_hx_tmp6) ) - this->selectedCard->get_width()));
HXLINE(  77)			this->selectedCard->set_visible(true);
            		}
            		else {
HXLINE(  79)			this->selectedCard->set_visible(false);
            		}
            	}


int CardState_obj::MARGIN_X;

int CardState_obj::MARGIN_Y;


::hx::ObjectPtr< CardState_obj > CardState_obj::__new() {
	::hx::ObjectPtr< CardState_obj > __this = new CardState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CardState_obj > CardState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CardState_obj *__this = (CardState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CardState_obj), true, "client.play.CardState"));
	*(void **)__this = CardState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CardState_obj::CardState_obj()
{
}

void CardState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CardState);
	HX_MARK_MEMBER_NAME(cards,"cards");
	HX_MARK_MEMBER_NAME(selectedCard,"selectedCard");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CardState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cards,"cards");
	HX_VISIT_MEMBER_NAME(selectedCard,"selectedCard");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CardState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cards") ) { return ::hx::Val( cards ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"addCard") ) { return ::hx::Val( addCard_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selectedCard") ) { return ::hx::Val( selectedCard ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CardState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"cards") ) { cards=inValue.Cast<  ::flixel::group::FlxTypedSpriteGroup >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selectedCard") ) { selectedCard=inValue.Cast<  ::client::play::game_pieces::CardSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CardState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("cards",a3,f8,1f,41));
	outFields->push(HX_("selectedCard",cb,3d,54,d2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CardState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedSpriteGroup */ ,(int)offsetof(CardState_obj,cards),HX_("cards",a3,f8,1f,41)},
	{::hx::fsObject /*  ::client::play::game_pieces::CardSprite */ ,(int)offsetof(CardState_obj,selectedCard),HX_("selectedCard",cb,3d,54,d2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CardState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &CardState_obj::MARGIN_X,HX_("MARGIN_X",c7,56,52,9e)},
	{::hx::fsInt,(void *) &CardState_obj::MARGIN_Y,HX_("MARGIN_Y",c8,56,52,9e)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CardState_obj_sMemberFields[] = {
	HX_("cards",a3,f8,1f,41),
	HX_("selectedCard",cb,3d,54,d2),
	HX_("create",fc,66,0f,7c),
	HX_("addCard",91,60,f7,7d),
	HX_("update",09,86,05,87),
	::String(null()) };

static void CardState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CardState_obj::MARGIN_X,"MARGIN_X");
	HX_MARK_MEMBER_NAME(CardState_obj::MARGIN_Y,"MARGIN_Y");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CardState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CardState_obj::MARGIN_X,"MARGIN_X");
	HX_VISIT_MEMBER_NAME(CardState_obj::MARGIN_Y,"MARGIN_Y");
};

#endif

::hx::Class CardState_obj::__mClass;

static ::String CardState_obj_sStaticFields[] = {
	HX_("MARGIN_X",c7,56,52,9e),
	HX_("MARGIN_Y",c8,56,52,9e),
	::String(null())
};

void CardState_obj::__register()
{
	CardState_obj _hx_dummy;
	CardState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("client.play.CardState",ca,fd,2d,79);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CardState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CardState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CardState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CardState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CardState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CardState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CardState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CardState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_00c9e914cea35c28_17_boot)
HXDLIN(  17)		MARGIN_X = 25;
            	}
{
            	HX_STACKFRAME(&_hx_pos_00c9e914cea35c28_18_boot)
HXDLIN(  18)		MARGIN_Y = 25;
            	}
}

} // end namespace client
} // end namespace play

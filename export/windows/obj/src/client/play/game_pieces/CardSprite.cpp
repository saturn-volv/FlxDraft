// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_client_play_game_pieces_CardSprite
#include <client/play/game_pieces/CardSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_lime_app_Future
#include <lime/app/Future.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_scryfall_Card
#include <scryfall/Card.h>
#endif
#ifndef INCLUDED_scryfall_Result
#include <scryfall/Result.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_77460ae1f01b4b32_14_new,"client.play.game_pieces.CardSprite","new",0xd51119da,"client.play.game_pieces.CardSprite.new","client/play/game_pieces/CardSprite.hx",14,0xe4bb09d5)
HX_DEFINE_STACK_FRAME(_hx_pos_77460ae1f01b4b32_47_new,"client.play.game_pieces.CardSprite","new",0xd51119da,"client.play.game_pieces.CardSprite.new","client/play/game_pieces/CardSprite.hx",47,0xe4bb09d5)
HX_DEFINE_STACK_FRAME(_hx_pos_77460ae1f01b4b32_53_new,"client.play.game_pieces.CardSprite","new",0xd51119da,"client.play.game_pieces.CardSprite.new","client/play/game_pieces/CardSprite.hx",53,0xe4bb09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_77460ae1f01b4b32_24_set_showcase,"client.play.game_pieces.CardSprite","set_showcase",0x93c944f0,"client.play.game_pieces.CardSprite.set_showcase","client/play/game_pieces/CardSprite.hx",24,0xe4bb09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_77460ae1f01b4b32_34_set__gameIndex,"client.play.game_pieces.CardSprite","set__gameIndex",0x6ac70b04,"client.play.game_pieces.CardSprite.set__gameIndex","client/play/game_pieces/CardSprite.hx",34,0xe4bb09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_77460ae1f01b4b32_58_update,"client.play.game_pieces.CardSprite","update",0x179fe4cf,"client.play.game_pieces.CardSprite.update","client/play/game_pieces/CardSprite.hx",58,0xe4bb09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_77460ae1f01b4b32_65_offHover,"client.play.game_pieces.CardSprite","offHover",0x986a0c13,"client.play.game_pieces.CardSprite.offHover","client/play/game_pieces/CardSprite.hx",65,0xe4bb09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_77460ae1f01b4b32_70_onHover,"client.play.game_pieces.CardSprite","onHover",0xb81b1297,"client.play.game_pieces.CardSprite.onHover","client/play/game_pieces/CardSprite.hx",70,0xe4bb09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_77460ae1f01b4b32_75_generateShowcaseCard,"client.play.game_pieces.CardSprite","generateShowcaseCard",0x3697aeb8,"client.play.game_pieces.CardSprite.generateShowcaseCard","client/play/game_pieces/CardSprite.hx",75,0xe4bb09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_77460ae1f01b4b32_15_boot,"client.play.game_pieces.CardSprite","boot",0x91fe8578,"client.play.game_pieces.CardSprite.boot","client/play/game_pieces/CardSprite.hx",15,0xe4bb09d5)
HX_LOCAL_STACK_FRAME(_hx_pos_77460ae1f01b4b32_16_boot,"client.play.game_pieces.CardSprite","boot",0x91fe8578,"client.play.game_pieces.CardSprite.boot","client/play/game_pieces/CardSprite.hx",16,0xe4bb09d5)
namespace client{
namespace play{
namespace game_pieces{

void CardSprite_obj::__construct( ::scryfall::Card card, ::Dynamic graphic){
            	HX_STACKFRAME(&_hx_pos_77460ae1f01b4b32_14_new)
HXLINE(  32)		this->hovering = false;
HXLINE(  22)		this->showcase = false;
HXLINE(  42)		 ::client::play::game_pieces::CardSprite _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  43)		super::__construct(0,0,graphic);
HXLINE(  44)		this->_card = card;
HXLINE(  45)		if (::hx::IsNull( graphic )) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::client::play::game_pieces::CardSprite,_gthis) HXARGC(1)
            			void _hx_run( ::openfl::display::BitmapData v){
            				HX_STACKFRAME(&_hx_pos_77460ae1f01b4b32_47_new)
HXLINE(  48)				_gthis->loadGraphic(v,null(),null(),null(),null(),null());
HXLINE(  49)				_gthis->setGraphicSize(::client::play::game_pieces::CardSprite_obj::cardWidth,null());
HXLINE(  50)				_gthis->updateHitbox();
HXLINE(  51)				_gthis->prevWidth = ::client::play::game_pieces::CardSprite_obj::cardWidth;
HXLINE(  52)				_gthis->_cardWidth = ::client::play::game_pieces::CardSprite_obj::cardWidth;
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::Dynamic v){
            				HX_STACKFRAME(&_hx_pos_77460ae1f01b4b32_53_new)
HXLINE(  53)				::haxe::Log_obj::trace(HX_("oopsie!",82,11,a0,32),::hx::SourceInfo(HX_("source/client/play/game_pieces/CardSprite.hx",61,f6,40,0b),53,HX_("client.play.game_pieces.CardSprite",e8,e4,1c,07),HX_("new",60,d0,53,00)));
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(  47)			 ::Dynamic tmp = this->_card->_struct->__Field(HX_("image_uris",2b,46,5e,79),::hx::paccDynamic);
HXDLIN(  47)			::String tmp1;
HXDLIN(  47)			if (::hx::IsNotNull( tmp )) {
HXLINE(  47)				tmp1 = ( (::String)(tmp->__Field(HX_("large",bb,33,bb,6f),::hx::paccDynamic)) );
            			}
            			else {
HXLINE(  47)				tmp1 = null();
            			}
HXDLIN(  47)			::String _hx_tmp;
HXDLIN(  47)			if (::hx::IsNotNull( tmp1 )) {
HXLINE(  47)				_hx_tmp = tmp1;
            			}
            			else {
HXLINE(  47)				_hx_tmp = ( (::String)( ::Dynamic( ::Dynamic(this->_card->_struct->__Field(HX_("card_faces",47,f6,4d,f8),::hx::paccDynamic))->__GetItem(0)->__Field(HX_("image_uris",2b,46,5e,79),::hx::paccDynamic))->__Field(HX_("large",bb,33,bb,6f),::hx::paccDynamic)) );
            			}
HXDLIN(  47)			::openfl::display::BitmapData_obj::loadFromFile(_hx_tmp)->onComplete( ::Dynamic(new _hx_Closure_0(_gthis)))->onError( ::Dynamic(new _hx_Closure_1()));
            		}
HXLINE(  55)		this->set_antialiasing(true);
            	}

Dynamic CardSprite_obj::__CreateEmpty() { return new CardSprite_obj; }

void *CardSprite_obj::_hx_vtable = 0;

Dynamic CardSprite_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CardSprite_obj > _hx_result = new CardSprite_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CardSprite_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x0d40e604) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0d40e604;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

bool CardSprite_obj::set_showcase(bool v){
            	HX_STACKFRAME(&_hx_pos_77460ae1f01b4b32_24_set_showcase)
HXLINE(  25)		if (v) {
HXLINE(  26)			this->setGraphicSize((::client::play::game_pieces::CardSprite_obj::cardWidth * ((Float)2.3)),null());
            		}
            		else {
HXLINE(  28)			this->setGraphicSize(::client::play::game_pieces::CardSprite_obj::cardWidth,null());
            		}
HXLINE(  29)		return (this->showcase = v);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CardSprite_obj,set_showcase,return )

int CardSprite_obj::set__gameIndex(int index){
            	HX_STACKFRAME(&_hx_pos_77460ae1f01b4b32_34_set__gameIndex)
HXLINE(  35)		if (!(this->showcase)) {
HXLINE(  36)			this->set_x((( (Float)(::hx::Mod(index,5)) ) * (::client::play::game_pieces::CardSprite_obj::cardWidth + 1)));
HXLINE(  37)			this->set_y(((( (Float)(::Math_obj::floor((( (Float)(index) ) / ( (Float)(5) )))) ) * ::client::play::game_pieces::CardSprite_obj::cardHeight) + 15));
            		}
HXLINE(  39)		return (this->_gameIndex = index);
            	}


HX_DEFINE_DYNAMIC_FUNC1(CardSprite_obj,set__gameIndex,return )

void CardSprite_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_77460ae1f01b4b32_58_update)
HXLINE(  59)		this->super::update(elapsed);
HXLINE(  60)		Float a = this->prevWidth;
HXDLIN(  60)		this->prevWidth = (a + ((elapsed * ((Float)11.1)) * (( (Float)(this->_cardWidth) ) - a)));
HXLINE(  61)		this->setGraphicSize(this->prevWidth,null());
            	}


void CardSprite_obj::offHover(){
            	HX_STACKFRAME(&_hx_pos_77460ae1f01b4b32_65_offHover)
HXLINE(  66)		this->_cardWidth = ::client::play::game_pieces::CardSprite_obj::cardWidth;
HXLINE(  67)		this->hovering = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CardSprite_obj,offHover,(void))

void CardSprite_obj::onHover(){
            	HX_STACKFRAME(&_hx_pos_77460ae1f01b4b32_70_onHover)
HXLINE(  71)		this->_cardWidth = (::client::play::game_pieces::CardSprite_obj::cardWidth * ((Float)1.15));
HXLINE(  72)		this->hovering = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(CardSprite_obj,onHover,(void))

Float CardSprite_obj::cardWidth;

Float CardSprite_obj::cardHeight;

 ::client::play::game_pieces::CardSprite CardSprite_obj::generateShowcaseCard( ::client::play::game_pieces::CardSprite cardSpr){
            	HX_GC_STACKFRAME(&_hx_pos_77460ae1f01b4b32_75_generateShowcaseCard)
HXLINE(  76)		 ::client::play::game_pieces::CardSprite cardSpr1 =  ::client::play::game_pieces::CardSprite_obj::__alloc( HX_CTX ,cardSpr->_card,null());
HXLINE(  77)		cardSpr1->loadGraphicFromSprite(cardSpr1);
HXLINE(  78)		cardSpr1->showcase = true;
HXLINE(  79)		cardSpr1->set_x((( (Float)(::flixel::FlxG_obj::width) ) - ::client::play::game_pieces::CardSprite_obj::cardWidth));
HXLINE(  80)		return cardSpr1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CardSprite_obj,generateShowcaseCard,return )


::hx::ObjectPtr< CardSprite_obj > CardSprite_obj::__new( ::scryfall::Card card, ::Dynamic graphic) {
	::hx::ObjectPtr< CardSprite_obj > __this = new CardSprite_obj();
	__this->__construct(card,graphic);
	return __this;
}

::hx::ObjectPtr< CardSprite_obj > CardSprite_obj::__alloc(::hx::Ctx *_hx_ctx, ::scryfall::Card card, ::Dynamic graphic) {
	CardSprite_obj *__this = (CardSprite_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CardSprite_obj), true, "client.play.game_pieces.CardSprite"));
	*(void **)__this = CardSprite_obj::_hx_vtable;
	__this->__construct(card,graphic);
	return __this;
}

CardSprite_obj::CardSprite_obj()
{
}

void CardSprite_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CardSprite);
	HX_MARK_MEMBER_NAME(_card,"_card");
	HX_MARK_MEMBER_NAME(prevWidth,"prevWidth");
	HX_MARK_MEMBER_NAME(_cardWidth,"_cardWidth");
	HX_MARK_MEMBER_NAME(_gameIndex,"_gameIndex");
	HX_MARK_MEMBER_NAME(showcase,"showcase");
	HX_MARK_MEMBER_NAME(hovering,"hovering");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CardSprite_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_card,"_card");
	HX_VISIT_MEMBER_NAME(prevWidth,"prevWidth");
	HX_VISIT_MEMBER_NAME(_cardWidth,"_cardWidth");
	HX_VISIT_MEMBER_NAME(_gameIndex,"_gameIndex");
	HX_VISIT_MEMBER_NAME(showcase,"showcase");
	HX_VISIT_MEMBER_NAME(hovering,"hovering");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CardSprite_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_card") ) { return ::hx::Val( _card ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"onHover") ) { return ::hx::Val( onHover_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"showcase") ) { return ::hx::Val( showcase ); }
		if (HX_FIELD_EQ(inName,"hovering") ) { return ::hx::Val( hovering ); }
		if (HX_FIELD_EQ(inName,"offHover") ) { return ::hx::Val( offHover_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"prevWidth") ) { return ::hx::Val( prevWidth ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_cardWidth") ) { return ::hx::Val( _cardWidth ); }
		if (HX_FIELD_EQ(inName,"_gameIndex") ) { return ::hx::Val( _gameIndex ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"set_showcase") ) { return ::hx::Val( set_showcase_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"set__gameIndex") ) { return ::hx::Val( set__gameIndex_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CardSprite_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"cardWidth") ) { outValue = ( cardWidth ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cardHeight") ) { outValue = ( cardHeight ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"generateShowcaseCard") ) { outValue = generateShowcaseCard_dyn(); return true; }
	}
	return false;
}

::hx::Val CardSprite_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_card") ) { _card=inValue.Cast<  ::scryfall::Card >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"showcase") ) { showcase=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hovering") ) { hovering=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"prevWidth") ) { prevWidth=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_cardWidth") ) { _cardWidth=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_gameIndex") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( set__gameIndex(inValue.Cast< int >()) );_gameIndex=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CardSprite_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"cardWidth") ) { cardWidth=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cardHeight") ) { cardHeight=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

void CardSprite_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_card",af,39,cb,f4));
	outFields->push(HX_("prevWidth",13,56,b9,b5));
	outFields->push(HX_("_cardWidth",d7,71,ea,78));
	outFields->push(HX_("_gameIndex",81,05,d2,4e));
	outFields->push(HX_("showcase",2d,b6,67,be));
	outFields->push(HX_("hovering",a6,64,8c,e5));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CardSprite_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::scryfall::Card */ ,(int)offsetof(CardSprite_obj,_card),HX_("_card",af,39,cb,f4)},
	{::hx::fsFloat,(int)offsetof(CardSprite_obj,prevWidth),HX_("prevWidth",13,56,b9,b5)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(CardSprite_obj,_cardWidth),HX_("_cardWidth",d7,71,ea,78)},
	{::hx::fsInt,(int)offsetof(CardSprite_obj,_gameIndex),HX_("_gameIndex",81,05,d2,4e)},
	{::hx::fsBool,(int)offsetof(CardSprite_obj,showcase),HX_("showcase",2d,b6,67,be)},
	{::hx::fsBool,(int)offsetof(CardSprite_obj,hovering),HX_("hovering",a6,64,8c,e5)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CardSprite_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &CardSprite_obj::cardWidth,HX_("cardWidth",16,f6,47,1d)},
	{::hx::fsFloat,(void *) &CardSprite_obj::cardHeight,HX_("cardHeight",d7,d5,fe,37)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CardSprite_obj_sMemberFields[] = {
	HX_("_card",af,39,cb,f4),
	HX_("prevWidth",13,56,b9,b5),
	HX_("_cardWidth",d7,71,ea,78),
	HX_("_gameIndex",81,05,d2,4e),
	HX_("showcase",2d,b6,67,be),
	HX_("set_showcase",aa,8d,7a,88),
	HX_("hovering",a6,64,8c,e5),
	HX_("set__gameIndex",3e,76,e7,e4),
	HX_("update",09,86,05,87),
	HX_("offHover",cd,ef,65,e5),
	HX_("onHover",1d,84,a2,c1),
	::String(null()) };

static void CardSprite_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CardSprite_obj::cardWidth,"cardWidth");
	HX_MARK_MEMBER_NAME(CardSprite_obj::cardHeight,"cardHeight");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CardSprite_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CardSprite_obj::cardWidth,"cardWidth");
	HX_VISIT_MEMBER_NAME(CardSprite_obj::cardHeight,"cardHeight");
};

#endif

::hx::Class CardSprite_obj::__mClass;

static ::String CardSprite_obj_sStaticFields[] = {
	HX_("cardWidth",16,f6,47,1d),
	HX_("cardHeight",d7,d5,fe,37),
	HX_("generateShowcaseCard",72,41,37,ed),
	::String(null())
};

void CardSprite_obj::__register()
{
	CardSprite_obj _hx_dummy;
	CardSprite_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("client.play.game_pieces.CardSprite",e8,e4,1c,07);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CardSprite_obj::__GetStatic;
	__mClass->mSetStaticField = &CardSprite_obj::__SetStatic;
	__mClass->mMarkFunc = CardSprite_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CardSprite_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CardSprite_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CardSprite_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CardSprite_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CardSprite_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CardSprite_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CardSprite_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_77460ae1f01b4b32_15_boot)
HXDLIN(  15)		cardWidth = ((Float)150);
            	}
{
            	HX_STACKFRAME(&_hx_pos_77460ae1f01b4b32_16_boot)
HXDLIN(  16)		cardHeight = ((Float)210);
            	}
}

} // end namespace client
} // end namespace play
} // end namespace game_pieces

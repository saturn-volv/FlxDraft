// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_scryfall_Card
#include <scryfall/Card.h>
#endif
#ifndef INCLUDED_scryfall_Result
#include <scryfall/Result.h>
#endif
#ifndef INCLUDED_scryfall_search_ScrySearch
#include <scryfall/search/ScrySearch.h>
#endif
#ifndef INCLUDED_scryfall_search_cards_QuerySearchResult
#include <scryfall/search/cards/QuerySearchResult.h>
#endif
#ifndef INCLUDED_scryfall_search_cards__QuerySearchResult_CardCollection_Impl_
#include <scryfall/search/cards/_QuerySearchResult/CardCollection_Impl_.h>
#endif
#ifndef INCLUDED_server_play_Game
#include <server/play/Game.h>
#endif
#ifndef INCLUDED_server_play_board_cards_BoosterPack
#include <server/play/board/cards/BoosterPack.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c0620774913b577c_25_new,"server.play.board.cards.BoosterPack","new",0xaf807399,"server.play.board.cards.BoosterPack.new","server/play/board/cards/BoosterPack.hx",25,0xe81a1c99)
HX_LOCAL_STACK_FRAME(_hx_pos_c0620774913b577c_81_determineWildcardDistribution,"server.play.board.cards.BoosterPack","determineWildcardDistribution",0xf5a85c2a,"server.play.board.cards.BoosterPack.determineWildcardDistribution","server/play/board/cards/BoosterPack.hx",81,0xe81a1c99)
HX_LOCAL_STACK_FRAME(_hx_pos_c0620774913b577c_95_chooseCard,"server.play.board.cards.BoosterPack","chooseCard",0xdbdc822e,"server.play.board.cards.BoosterPack.chooseCard","server/play/board/cards/BoosterPack.hx",95,0xe81a1c99)
HX_LOCAL_STACK_FRAME(_hx_pos_c0620774913b577c_98_getBoosterValidCard,"server.play.board.cards.BoosterPack","getBoosterValidCard",0x9486826b,"server.play.board.cards.BoosterPack.getBoosterValidCard","server/play/board/cards/BoosterPack.hx",98,0xe81a1c99)
HX_LOCAL_STACK_FRAME(_hx_pos_c0620774913b577c_106_getBoosterValidBasicLandCard,"server.play.board.cards.BoosterPack","getBoosterValidBasicLandCard",0xe32a162e,"server.play.board.cards.BoosterPack.getBoosterValidBasicLandCard","server/play/board/cards/BoosterPack.hx",106,0xe81a1c99)
HX_LOCAL_STACK_FRAME(_hx_pos_c0620774913b577c_109_getBoosterFoilCard,"server.play.board.cards.BoosterPack","getBoosterFoilCard",0x6687a8bd,"server.play.board.cards.BoosterPack.getBoosterFoilCard","server/play/board/cards/BoosterPack.hx",109,0xe81a1c99)
HX_LOCAL_STACK_FRAME(_hx_pos_c0620774913b577c_32_get_setCards,"server.play.board.cards.BoosterPack","get_setCards",0x4aa9c351,"server.play.board.cards.BoosterPack.get_setCards","server/play/board/cards/BoosterPack.hx",32,0xe81a1c99)
HX_LOCAL_STACK_FRAME(_hx_pos_c0620774913b577c_118_getRandomCard,"server.play.board.cards.BoosterPack","getRandomCard",0x3bfdca22,"server.play.board.cards.BoosterPack.getRandomCard","server/play/board/cards/BoosterPack.hx",118,0xe81a1c99)
HX_LOCAL_STACK_FRAME(_hx_pos_c0620774913b577c_26_boot,"server.play.board.cards.BoosterPack","boot",0xd8fdb2d9,"server.play.board.cards.BoosterPack.boot","server/play/board/cards/BoosterPack.hx",26,0xe81a1c99)
HX_LOCAL_STACK_FRAME(_hx_pos_c0620774913b577c_27_boot,"server.play.board.cards.BoosterPack","boot",0xd8fdb2d9,"server.play.board.cards.BoosterPack.boot","server/play/board/cards/BoosterPack.hx",27,0xe81a1c99)
HX_LOCAL_STACK_FRAME(_hx_pos_c0620774913b577c_28_boot,"server.play.board.cards.BoosterPack","boot",0xd8fdb2d9,"server.play.board.cards.BoosterPack.boot","server/play/board/cards/BoosterPack.hx",28,0xe81a1c99)
namespace server{
namespace play{
namespace board{
namespace cards{

void BoosterPack_obj::__construct( ::Dynamic spreads){
            	HX_STACKFRAME(&_hx_pos_c0620774913b577c_25_new)
HXLINE(  37)		this->cardsInside = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  40)		::server::play::board::cards::BoosterPack_obj::setCode = ( (::String)(::server::play::Game_obj::instance->gameSettings->__Field(HX_("set",a2,9b,57,00),::hx::paccDynamic)) );
HXLINE(  41)		if (::hx::IsNull( spreads )) {
HXLINE(  41)			spreads = ::server::play::Game_obj::instance->spreads;
            		}
HXLINE(  43)		int commons;
HXDLIN(  43)		 ::Dynamic tmp;
HXDLIN(  43)		if (::hx::IsNotNull( spreads )) {
HXLINE(  43)			tmp = spreads->__Field(HX_("common",2b,75,2e,c7),::hx::paccDynamic);
            		}
            		else {
HXLINE(  43)			tmp = null();
            		}
HXDLIN(  43)		if (::hx::IsNotNull( tmp )) {
HXLINE(  43)			commons = ( (int)(tmp) );
            		}
            		else {
HXLINE(  43)			commons = 10;
            		}
HXLINE(  44)		int uncommons;
HXDLIN(  44)		 ::Dynamic tmp1;
HXDLIN(  44)		if (::hx::IsNotNull( spreads )) {
HXLINE(  44)			tmp1 = spreads->__Field(HX_("uncommon",44,a4,75,c9),::hx::paccDynamic);
            		}
            		else {
HXLINE(  44)			tmp1 = null();
            		}
HXDLIN(  44)		if (::hx::IsNotNull( tmp1 )) {
HXLINE(  44)			uncommons = ( (int)(tmp1) );
            		}
            		else {
HXLINE(  44)			uncommons = 3;
            		}
HXLINE(  45)		int rares;
HXDLIN(  45)		 ::Dynamic tmp2;
HXDLIN(  45)		if (::hx::IsNotNull( spreads )) {
HXLINE(  45)			tmp2 = spreads->__Field(HX_("rare",22,51,a4,4b),::hx::paccDynamic);
            		}
            		else {
HXLINE(  45)			tmp2 = null();
            		}
HXDLIN(  45)		if (::hx::IsNotNull( tmp2 )) {
HXLINE(  45)			rares = ( (int)(tmp2) );
            		}
            		else {
HXLINE(  45)			rares = 1;
            		}
HXLINE(  47)		{
HXLINE(  47)			int _g = 0;
HXDLIN(  47)			int _g1 = ((commons + uncommons) + rares);
HXDLIN(  47)			while((_g < _g1)){
HXLINE(  47)				_g = (_g + 1);
HXDLIN(  47)				int i = (_g - 1);
HXLINE(  48)				::String rarity = HX_("common",2b,75,2e,c7);
HXLINE(  49)				if ((i < commons)) {
HXLINE(  50)					rarity = HX_("common",2b,75,2e,c7);
            				}
            				else {
HXLINE(  51)					if (((i - commons) < uncommons)) {
HXLINE(  52)						rarity = HX_("uncommon",44,a4,75,c9);
            					}
            					else {
HXLINE(  53)						if ((((i - commons) - uncommons) < rares)) {
HXLINE(  54)							rarity = HX_("rare",22,51,a4,4b);
            						}
            					}
            				}
HXLINE(  55)				bool _hx_tmp;
HXDLIN(  55)				if ((rarity == HX_("rare",22,51,a4,4b))) {
HXLINE(  55)					_hx_tmp = (::Std_obj::random(8) == 0);
            				}
            				else {
HXLINE(  55)					_hx_tmp = false;
            				}
HXDLIN(  55)				if (_hx_tmp) {
HXLINE(  56)					rarity = HX_("mythic",ba,8b,5e,8d);
            				}
HXLINE(  57)				::Array< ::Dynamic> _hx_tmp1 = this->cardsInside;
HXDLIN(  57)				_hx_tmp1->push(this->getBoosterValidCard(rarity,null()));
            			}
            		}
HXLINE(  60)		 ::Dynamic tmp3;
HXDLIN(  60)		if (::hx::IsNotNull( spreads )) {
HXLINE(  60)			tmp3 = spreads->__Field(HX_("wildcards",59,c5,c6,4b),::hx::paccDynamic);
            		}
            		else {
HXLINE(  60)			tmp3 = null();
            		}
HXDLIN(  60)		int _hx_tmp2;
HXDLIN(  60)		if (::hx::IsNotNull( tmp3 )) {
HXLINE(  60)			_hx_tmp2 = ( (int)(tmp3) );
            		}
            		else {
HXLINE(  60)			_hx_tmp2 = 0;
            		}
HXDLIN(  60)		if ((_hx_tmp2 >= 0)) {
HXLINE(  61)			int _g2 = 0;
HXDLIN(  61)			int _g3;
HXDLIN(  61)			 ::Dynamic tmp4;
HXDLIN(  61)			if (::hx::IsNotNull( spreads )) {
HXLINE(  61)				tmp4 = spreads->__Field(HX_("wildcards",59,c5,c6,4b),::hx::paccDynamic);
            			}
            			else {
HXLINE(  61)				tmp4 = null();
            			}
HXDLIN(  61)			if (::hx::IsNotNull( tmp4 )) {
HXLINE(  61)				_g3 = ( (int)(tmp4) );
            			}
            			else {
HXLINE(  61)				_g3 = 0;
            			}
HXDLIN(  61)			while((_g2 < _g3)){
HXLINE(  61)				_g2 = (_g2 + 1);
HXDLIN(  61)				int i1 = (_g2 - 1);
HXLINE(  62)				 ::Dynamic wildCardDist = this->determineWildcardDistribution();
HXLINE(  63)				::Array< ::Dynamic> _hx_tmp3 = this->cardsInside;
HXDLIN(  63)				_hx_tmp3->push(this->getBoosterValidCard(( (::String)(wildCardDist->__Field(HX_("rarity",2b,cc,37,ba),::hx::paccDynamic)) ),wildCardDist->__Field(HX_("doublefaced",76,6c,32,ed),::hx::paccDynamic)));
            			}
            		}
HXLINE(  66)		 ::Dynamic tmp5;
HXDLIN(  66)		if (::hx::IsNotNull( spreads )) {
HXLINE(  66)			tmp5 = spreads->__Field(HX_("foils",87,e5,8d,04),::hx::paccDynamic);
            		}
            		else {
HXLINE(  66)			tmp5 = null();
            		}
HXDLIN(  66)		int _hx_tmp4;
HXDLIN(  66)		if (::hx::IsNotNull( tmp5 )) {
HXLINE(  66)			_hx_tmp4 = ( (int)(tmp5) );
            		}
            		else {
HXLINE(  66)			_hx_tmp4 = 0;
            		}
HXDLIN(  66)		if ((_hx_tmp4 >= 0)) {
HXLINE(  67)			int _g4 = 0;
HXDLIN(  67)			int _g5;
HXDLIN(  67)			 ::Dynamic tmp6;
HXDLIN(  67)			if (::hx::IsNotNull( spreads )) {
HXLINE(  67)				tmp6 = spreads->__Field(HX_("foils",87,e5,8d,04),::hx::paccDynamic);
            			}
            			else {
HXLINE(  67)				tmp6 = null();
            			}
HXDLIN(  67)			if (::hx::IsNotNull( tmp6 )) {
HXLINE(  67)				_g5 = ( (int)(tmp6) );
            			}
            			else {
HXLINE(  67)				_g5 = 0;
            			}
HXDLIN(  67)			while((_g4 < _g5)){
HXLINE(  67)				_g4 = (_g4 + 1);
HXDLIN(  67)				int i2 = (_g4 - 1);
HXLINE(  68)				::Array< ::Dynamic> _hx_tmp5 = this->cardsInside;
HXDLIN(  68)				_hx_tmp5->push(this->getBoosterFoilCard());
            			}
            		}
HXLINE(  70)		 ::Dynamic tmp7;
HXDLIN(  70)		if (::hx::IsNotNull( spreads )) {
HXLINE(  70)			tmp7 = spreads->__Field(HX_("lands",28,28,b8,6f),::hx::paccDynamic);
            		}
            		else {
HXLINE(  70)			tmp7 = null();
            		}
HXDLIN(  70)		int _hx_tmp6;
HXDLIN(  70)		if (::hx::IsNotNull( tmp7 )) {
HXLINE(  70)			_hx_tmp6 = ( (int)(tmp7) );
            		}
            		else {
HXLINE(  70)			_hx_tmp6 = 1;
            		}
HXDLIN(  70)		if ((_hx_tmp6 >= 1)) {
HXLINE(  71)			int _g6 = 0;
HXDLIN(  71)			int _g7;
HXDLIN(  71)			 ::Dynamic tmp8;
HXDLIN(  71)			if (::hx::IsNotNull( spreads )) {
HXLINE(  71)				tmp8 = spreads->__Field(HX_("lands",28,28,b8,6f),::hx::paccDynamic);
            			}
            			else {
HXLINE(  71)				tmp8 = null();
            			}
HXDLIN(  71)			if (::hx::IsNotNull( tmp8 )) {
HXLINE(  71)				_g7 = ( (int)(tmp8) );
            			}
            			else {
HXLINE(  71)				_g7 = 1;
            			}
HXDLIN(  71)			while((_g6 < _g7)){
HXLINE(  71)				_g6 = (_g6 + 1);
HXDLIN(  71)				int i3 = (_g6 - 1);
HXLINE(  72)				Float replaceByCommon = (( (Float)(::Std_obj::random(100)) ) / ( (Float)(100) ));
HXDLIN(  72)				 ::Dynamic tmp9;
HXDLIN(  72)				if (::hx::IsNotNull( spreads )) {
HXLINE(  72)					tmp9 = spreads->__Field(HX_("commonReplacesLand",15,b9,ed,16),::hx::paccDynamic);
            				}
            				else {
HXLINE(  72)					tmp9 = null();
            				}
HXDLIN(  72)				Float replaceByCommon1;
HXDLIN(  72)				if (::hx::IsNotNull( tmp9 )) {
HXLINE(  72)					replaceByCommon1 = ( (Float)(tmp9) );
            				}
            				else {
HXLINE(  72)					replaceByCommon1 = ((Float)0.0);
            				}
HXDLIN(  72)				bool replaceByCommon2 = !((replaceByCommon >= replaceByCommon1));
HXLINE(  73)				if (replaceByCommon2) {
HXLINE(  74)					::Array< ::Dynamic> _hx_tmp7 = this->cardsInside;
HXDLIN(  74)					_hx_tmp7->push(::scryfall::search::cards::_QuerySearchResult::CardCollection_Impl__obj::randomQuery(::server::play::board::cards::BoosterPack_obj::get_setCards(),HX_("-t:basic r:common",58,1c,ae,c6)));
            				}
            				else {
HXLINE(  76)					::Array< ::Dynamic> _hx_tmp8 = this->cardsInside;
HXDLIN(  76)					_hx_tmp8->push(this->getBoosterValidBasicLandCard());
            				}
            			}
            		}
            	}

Dynamic BoosterPack_obj::__CreateEmpty() { return new BoosterPack_obj; }

void *BoosterPack_obj::_hx_vtable = 0;

Dynamic BoosterPack_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BoosterPack_obj > _hx_result = new BoosterPack_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool BoosterPack_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1200d191;
}

 ::Dynamic BoosterPack_obj::determineWildcardDistribution(){
            	HX_STACKFRAME(&_hx_pos_c0620774913b577c_81_determineWildcardDistribution)
HXLINE(  82)		Float target = (( (Float)(::Std_obj::random(1000)) ) / ( (Float)(10) ));
HXLINE(  83)		target = (target - ((Float)41.7));
HXDLIN(  83)		if ((target <= 0)) {
HXLINE(  84)			return  ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("rarity",2b,cc,37,ba),HX_("common",2b,75,2e,c7)));
            		}
HXLINE(  85)		target = (target - ((Float)33.4));
HXDLIN(  85)		if ((target <= 0)) {
HXLINE(  86)			return  ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("rarity",2b,cc,37,ba),HX_("uncommon",44,a4,75,c9)));
            		}
HXLINE(  87)		target = (target - ((Float)8.3));
HXDLIN(  87)		if ((target <= 0)) {
HXLINE(  88)			return  ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("rarity",2b,cc,37,ba),HX_("uncommon",44,a4,75,c9))
            				->setFixed(1,HX_("doublefaced",76,6c,32,ed),true));
            		}
HXLINE(  89)		target = (target - ((Float)6.7));
HXDLIN(  89)		if ((target <= 0)) {
HXLINE(  90)			return  ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("rarity",2b,cc,37,ba),HX_("rare",22,51,a4,4b)));
            		}
HXLINE(  91)		return  ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("rarity",2b,cc,37,ba),HX_("mythic",ba,8b,5e,8d))
            			->setFixed(1,HX_("doublefaced",76,6c,32,ed),(::Std_obj::random(1000) <= 11)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BoosterPack_obj,determineWildcardDistribution,return )

 ::scryfall::Card BoosterPack_obj::chooseCard(int index){
            	HX_STACKFRAME(&_hx_pos_c0620774913b577c_95_chooseCard)
HXDLIN(  95)		return this->cardsInside->__get(::hx::Mod(index,this->cardsInside->length)).StaticCast<  ::scryfall::Card >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(BoosterPack_obj,chooseCard,return )

 ::scryfall::Card BoosterPack_obj::getBoosterValidCard(::String rarity, ::Dynamic __o_doublefaced){
            		 ::Dynamic doublefaced = __o_doublefaced;
            		if (::hx::IsNull(__o_doublefaced)) doublefaced = false;
            	HX_STACKFRAME(&_hx_pos_c0620774913b577c_98_getBoosterValidCard)
HXLINE(  99)		::String suffix = HX_("",00,00,00,00);
HXLINE( 100)		if (( (bool)(doublefaced) )) {
HXLINE( 101)			suffix = HX_("is:dfc",91,33,30,59);
            		}
HXLINE( 102)		return ::scryfall::search::cards::_QuerySearchResult::CardCollection_Impl__obj::randomQuery(::server::play::board::cards::BoosterPack_obj::get_setCards(),(((HX_("r:",88,63,00,00) + rarity) + HX_(" ",20,00,00,00)) + suffix));
            	}


HX_DEFINE_DYNAMIC_FUNC2(BoosterPack_obj,getBoosterValidCard,return )

 ::scryfall::Card BoosterPack_obj::getBoosterValidBasicLandCard(){
            	HX_STACKFRAME(&_hx_pos_c0620774913b577c_106_getBoosterValidBasicLandCard)
HXDLIN( 106)		return ::scryfall::search::ScrySearch_obj::randomCard((HX_("t:basic e:",ad,f1,07,45) + ::server::play::board::cards::BoosterPack_obj::setCode));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BoosterPack_obj,getBoosterValidBasicLandCard,return )

 ::scryfall::Card BoosterPack_obj::getBoosterFoilCard(){
            	HX_STACKFRAME(&_hx_pos_c0620774913b577c_109_getBoosterFoilCard)
HXLINE( 110)		bool borderless = (::Std_obj::random(200) == 0);
HXLINE( 111)		::String suffix = HX_("",00,00,00,00);
HXLINE( 112)		if (borderless) {
HXLINE( 113)			suffix = HX_("is:fetchland border:borderless",c8,66,4f,cf);
            		}
HXLINE( 114)		return ::server::play::board::cards::BoosterPack_obj::getRandomCard((((HX_("-t:basic e:",1a,cc,20,ec) + ::server::play::board::cards::BoosterPack_obj::setCode) + HX_(" is:booster ",c0,0c,17,12)) + suffix));
            	}


HX_DEFINE_DYNAMIC_FUNC0(BoosterPack_obj,getBoosterFoilCard,return )

int BoosterPack_obj::DRAFT_COMMON_DIST;

int BoosterPack_obj::DRAFT_UNCOMMON_DIST;

int BoosterPack_obj::DRAFT_RARE_DIST;

::Array< ::Dynamic> BoosterPack_obj::setCards;

::Array< ::Dynamic> BoosterPack_obj::get_setCards(){
            	HX_STACKFRAME(&_hx_pos_c0620774913b577c_32_get_setCards)
HXDLIN(  32)		::Array< ::Dynamic> _hx_tmp;
HXDLIN(  32)		if (::hx::IsNotNull( ::server::play::board::cards::BoosterPack_obj::setCards )) {
HXDLIN(  32)			_hx_tmp = ::server::play::board::cards::BoosterPack_obj::setCards;
            		}
            		else {
HXDLIN(  32)			_hx_tmp = ::scryfall::search::ScrySearch_obj::queryCard(((HX_("-t:basic e:",1a,cc,20,ec) + ::server::play::board::cards::BoosterPack_obj::setCode) + HX_(" is:booster",60,67,e3,34)),null())->getCollection();
            		}
HXDLIN(  32)		return (::server::play::board::cards::BoosterPack_obj::setCards = _hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(BoosterPack_obj,get_setCards,return )

::String BoosterPack_obj::setCode;

 ::scryfall::Card BoosterPack_obj::getRandomCard(::String query){
            	HX_STACKFRAME(&_hx_pos_c0620774913b577c_118_getRandomCard)
HXDLIN( 118)		return ::scryfall::search::ScrySearch_obj::randomCard(query);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(BoosterPack_obj,getRandomCard,return )


::hx::ObjectPtr< BoosterPack_obj > BoosterPack_obj::__new( ::Dynamic spreads) {
	::hx::ObjectPtr< BoosterPack_obj > __this = new BoosterPack_obj();
	__this->__construct(spreads);
	return __this;
}

::hx::ObjectPtr< BoosterPack_obj > BoosterPack_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic spreads) {
	BoosterPack_obj *__this = (BoosterPack_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(BoosterPack_obj), true, "server.play.board.cards.BoosterPack"));
	*(void **)__this = BoosterPack_obj::_hx_vtable;
	__this->__construct(spreads);
	return __this;
}

BoosterPack_obj::BoosterPack_obj()
{
}

void BoosterPack_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(BoosterPack);
	HX_MARK_MEMBER_NAME(cardsInside,"cardsInside");
	HX_MARK_END_CLASS();
}

void BoosterPack_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(cardsInside,"cardsInside");
}

::hx::Val BoosterPack_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"chooseCard") ) { return ::hx::Val( chooseCard_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"cardsInside") ) { return ::hx::Val( cardsInside ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"getBoosterFoilCard") ) { return ::hx::Val( getBoosterFoilCard_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"getBoosterValidCard") ) { return ::hx::Val( getBoosterValidCard_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"getBoosterValidBasicLandCard") ) { return ::hx::Val( getBoosterValidBasicLandCard_dyn() ); }
		break;
	case 29:
		if (HX_FIELD_EQ(inName,"determineWildcardDistribution") ) { return ::hx::Val( determineWildcardDistribution_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool BoosterPack_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"setCode") ) { outValue = ( setCode ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setCards") ) { outValue = ( inCallProp == ::hx::paccAlways ? get_setCards() : setCards ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_setCards") ) { outValue = get_setCards_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getRandomCard") ) { outValue = getRandomCard_dyn(); return true; }
	}
	return false;
}

::hx::Val BoosterPack_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"cardsInside") ) { cardsInside=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool BoosterPack_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"setCode") ) { setCode=ioValue.Cast< ::String >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"setCards") ) { setCards=ioValue.Cast< ::Array< ::Dynamic> >(); return true; }
	}
	return false;
}

void BoosterPack_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("cardsInside",ff,48,09,7a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo BoosterPack_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(BoosterPack_obj,cardsInside),HX_("cardsInside",ff,48,09,7a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo BoosterPack_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &BoosterPack_obj::DRAFT_COMMON_DIST,HX_("DRAFT_COMMON_DIST",bc,3a,d7,8b)},
	{::hx::fsInt,(void *) &BoosterPack_obj::DRAFT_UNCOMMON_DIST,HX_("DRAFT_UNCOMMON_DIST",83,f1,d9,e1)},
	{::hx::fsInt,(void *) &BoosterPack_obj::DRAFT_RARE_DIST,HX_("DRAFT_RARE_DIST",e5,7e,0e,23)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &BoosterPack_obj::setCards,HX_("setCards",a1,61,54,4f)},
	{::hx::fsString,(void *) &BoosterPack_obj::setCode,HX_("setCode",ef,f1,48,07)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String BoosterPack_obj_sMemberFields[] = {
	HX_("cardsInside",ff,48,09,7a),
	HX_("determineWildcardDistribution",b1,d5,a5,66),
	HX_("chooseCard",47,5c,a3,32),
	HX_("getBoosterValidCard",32,1d,5a,66),
	HX_("getBoosterValidBasicLandCard",87,6a,f6,04),
	HX_("getBoosterFoilCard",d6,c3,4b,20),
	::String(null()) };

static void BoosterPack_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(BoosterPack_obj::DRAFT_COMMON_DIST,"DRAFT_COMMON_DIST");
	HX_MARK_MEMBER_NAME(BoosterPack_obj::DRAFT_UNCOMMON_DIST,"DRAFT_UNCOMMON_DIST");
	HX_MARK_MEMBER_NAME(BoosterPack_obj::DRAFT_RARE_DIST,"DRAFT_RARE_DIST");
	HX_MARK_MEMBER_NAME(BoosterPack_obj::setCards,"setCards");
	HX_MARK_MEMBER_NAME(BoosterPack_obj::setCode,"setCode");
};

#ifdef HXCPP_VISIT_ALLOCS
static void BoosterPack_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(BoosterPack_obj::DRAFT_COMMON_DIST,"DRAFT_COMMON_DIST");
	HX_VISIT_MEMBER_NAME(BoosterPack_obj::DRAFT_UNCOMMON_DIST,"DRAFT_UNCOMMON_DIST");
	HX_VISIT_MEMBER_NAME(BoosterPack_obj::DRAFT_RARE_DIST,"DRAFT_RARE_DIST");
	HX_VISIT_MEMBER_NAME(BoosterPack_obj::setCards,"setCards");
	HX_VISIT_MEMBER_NAME(BoosterPack_obj::setCode,"setCode");
};

#endif

::hx::Class BoosterPack_obj::__mClass;

static ::String BoosterPack_obj_sStaticFields[] = {
	HX_("DRAFT_COMMON_DIST",bc,3a,d7,8b),
	HX_("DRAFT_UNCOMMON_DIST",83,f1,d9,e1),
	HX_("DRAFT_RARE_DIST",e5,7e,0e,23),
	HX_("setCards",a1,61,54,4f),
	HX_("get_setCards",aa,15,6e,04),
	HX_("setCode",ef,f1,48,07),
	HX_("getRandomCard",a9,85,01,0e),
	::String(null())
};

void BoosterPack_obj::__register()
{
	BoosterPack_obj _hx_dummy;
	BoosterPack_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("server.play.board.cards.BoosterPack",27,b3,4e,a3);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BoosterPack_obj::__GetStatic;
	__mClass->mSetStaticField = &BoosterPack_obj::__SetStatic;
	__mClass->mMarkFunc = BoosterPack_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BoosterPack_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(BoosterPack_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< BoosterPack_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = BoosterPack_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BoosterPack_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BoosterPack_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void BoosterPack_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c0620774913b577c_26_boot)
HXDLIN(  26)		DRAFT_COMMON_DIST = 10;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c0620774913b577c_27_boot)
HXDLIN(  27)		DRAFT_UNCOMMON_DIST = 3;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c0620774913b577c_28_boot)
HXDLIN(  28)		DRAFT_RARE_DIST = 1;
            	}
}

} // end namespace server
} // end namespace play
} // end namespace board
} // end namespace cards

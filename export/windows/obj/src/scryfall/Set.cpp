// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_scryfall_Result
#include <scryfall/Result.h>
#endif
#ifndef INCLUDED_scryfall_Set
#include <scryfall/Set.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_75438f01b50f293f_14_new,"scryfall.Set","new",0xf2b34158,"scryfall.Set.new","scryfall/Set.hx",14,0xf391a7d9)
HX_LOCAL_STACK_FRAME(_hx_pos_75438f01b50f293f_6_get_name,"scryfall.Set","get_name",0xfee639dc,"scryfall.Set.get_name","scryfall/Set.hx",6,0xf391a7d9)
HX_LOCAL_STACK_FRAME(_hx_pos_75438f01b50f293f_10_get_setCode,"scryfall.Set","get_setCode",0x6e707afe,"scryfall.Set.get_setCode","scryfall/Set.hx",10,0xf391a7d9)
namespace scryfall{

void Set_obj::__construct( ::Dynamic obj){
            	HX_STACKFRAME(&_hx_pos_75438f01b50f293f_14_new)
HXDLIN(  14)		super::__construct(obj);
            	}

Dynamic Set_obj::__CreateEmpty() { return new Set_obj; }

void *Set_obj::_hx_vtable = 0;

Dynamic Set_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Set_obj > _hx_result = new Set_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Set_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4f2ef4c4) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x4f2ef4c4;
	} else {
		return inClassId==(int)0x593034cf;
	}
}

::String Set_obj::get_name(){
            	HX_STACKFRAME(&_hx_pos_75438f01b50f293f_6_get_name)
HXDLIN(   6)		return ( (::String)(this->_struct->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Set_obj,get_name,return )

::String Set_obj::get_setCode(){
            	HX_STACKFRAME(&_hx_pos_75438f01b50f293f_10_get_setCode)
HXDLIN(  10)		return ( (::String)(this->_struct->__Field(HX_("code",2d,b1,c4,41),::hx::paccDynamic)) );
            	}


HX_DEFINE_DYNAMIC_FUNC0(Set_obj,get_setCode,return )


Set_obj::Set_obj()
{
}

::hx::Val Set_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_name() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"setCode") ) { if (inCallProp == ::hx::paccAlways) return ::hx::Val( get_setCode() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"get_name") ) { return ::hx::Val( get_name_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"get_setCode") ) { return ::hx::Val( get_setCode_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

void Set_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("setCode",ef,f1,48,07));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Set_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Set_obj_sStaticStorageInfo = 0;
#endif

static ::String Set_obj_sMemberFields[] = {
	HX_("get_name",d4,2d,ba,c8),
	HX_("get_setCode",06,52,43,8d),
	::String(null()) };

::hx::Class Set_obj::__mClass;

void Set_obj::__register()
{
	Set_obj _hx_dummy;
	Set_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("scryfall.Set",66,f5,79,bc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Set_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Set_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Set_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Set_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace scryfall

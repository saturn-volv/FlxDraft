// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_scryfall_Card
#include <scryfall/Card.h>
#endif
#ifndef INCLUDED_scryfall_Result
#include <scryfall/Result.h>
#endif
#ifndef INCLUDED_scryfall_search_cards__QuerySearchResult_CardCollection_Impl_
#include <scryfall/search/cards/_QuerySearchResult/CardCollection_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_0dbac93d128095d9_10_randomQuery,"scryfall.search.cards._QuerySearchResult.CardCollection_Impl_","randomQuery",0x307e5330,"scryfall.search.cards._QuerySearchResult.CardCollection_Impl_.randomQuery","scryfall/search/cards/QuerySearchResult.hx",10,0x7b1d21e7)
HX_LOCAL_STACK_FRAME(_hx_pos_0dbac93d128095d9_40_isQuery,"scryfall.search.cards._QuerySearchResult.CardCollection_Impl_","isQuery",0xd0742269,"scryfall.search.cards._QuerySearchResult.CardCollection_Impl_.isQuery","scryfall/search/cards/QuerySearchResult.hx",40,0x7b1d21e7)
HX_LOCAL_STACK_FRAME(_hx_pos_0dbac93d128095d9_54_tQuery,"scryfall.search.cards._QuerySearchResult.CardCollection_Impl_","tQuery",0x2eb740a9,"scryfall.search.cards._QuerySearchResult.CardCollection_Impl_.tQuery","scryfall/search/cards/QuerySearchResult.hx",54,0x7b1d21e7)
HX_LOCAL_STACK_FRAME(_hx_pos_0dbac93d128095d9_59_rQuery,"scryfall.search.cards._QuerySearchResult.CardCollection_Impl_","rQuery",0x620087eb,"scryfall.search.cards._QuerySearchResult.CardCollection_Impl_.rQuery","scryfall/search/cards/QuerySearchResult.hx",59,0x7b1d21e7)
HX_LOCAL_STACK_FRAME(_hx_pos_0dbac93d128095d9_64_colQuery,"scryfall.search.cards._QuerySearchResult.CardCollection_Impl_","colQuery",0xb364d49d,"scryfall.search.cards._QuerySearchResult.CardCollection_Impl_.colQuery","scryfall/search/cards/QuerySearchResult.hx",64,0x7b1d21e7)
HX_LOCAL_STACK_FRAME(_hx_pos_0dbac93d128095d9_8_boot,"scryfall.search.cards._QuerySearchResult.CardCollection_Impl_","boot",0x967d67a7,"scryfall.search.cards._QuerySearchResult.CardCollection_Impl_.boot","scryfall/search/cards/QuerySearchResult.hx",8,0x7b1d21e7)
HX_LOCAL_STACK_FRAME(_hx_pos_0dbac93d128095d9_9_boot,"scryfall.search.cards._QuerySearchResult.CardCollection_Impl_","boot",0x967d67a7,"scryfall.search.cards._QuerySearchResult.CardCollection_Impl_.boot","scryfall/search/cards/QuerySearchResult.hx",9,0x7b1d21e7)
namespace scryfall{
namespace search{
namespace cards{
namespace _QuerySearchResult{

void CardCollection_Impl__obj::__construct() { }

Dynamic CardCollection_Impl__obj::__CreateEmpty() { return new CardCollection_Impl__obj; }

void *CardCollection_Impl__obj::_hx_vtable = 0;

Dynamic CardCollection_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CardCollection_Impl__obj > _hx_result = new CardCollection_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CardCollection_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x080f18e5;
}

::String CardCollection_Impl__obj::previousQuery;

::Array< ::Dynamic> CardCollection_Impl__obj::previousResult;

 ::scryfall::Card CardCollection_Impl__obj::randomQuery(::Array< ::Dynamic> this1,::String supQuery){
            	HX_STACKFRAME(&_hx_pos_0dbac93d128095d9_10_randomQuery)
HXLINE(  11)		::Array< ::String > queries = supQuery.split(HX_(" ",20,00,00,00));
HXLINE(  12)		::Array< ::Dynamic> results = this1;
HXLINE(  13)		if ((::scryfall::search::cards::_QuerySearchResult::CardCollection_Impl__obj::previousQuery == supQuery)) {
HXLINE(  14)			results = ::scryfall::search::cards::_QuerySearchResult::CardCollection_Impl__obj::previousResult;
            		}
            		else {
HXLINE(  17)			int _g = 0;
HXDLIN(  17)			while((_g < queries->length)){
HXLINE(  17)				::String q = queries->__get(_g);
HXDLIN(  17)				_g = (_g + 1);
HXLINE(  18)				::String head = q.split(HX_(":",3a,00,00,00))->__get(0);
HXLINE(  19)				::String body = q.split(HX_(":",3a,00,00,00))->__get(1);
HXLINE(  21)				bool _hx_not = ::StringTools_obj::startsWith(head,HX_("-",2d,00,00,00));
HXLINE(  22)				if (_hx_not) {
HXLINE(  22)					head = ::StringTools_obj::replace(head,HX_("-",2d,00,00,00),HX_("",00,00,00,00));
            				}
HXLINE(  26)				::String _hx_switch_0 = head;
            				if (  (_hx_switch_0==HX_("c",63,00,00,00)) ){
HXLINE(  30)					results = ::scryfall::search::cards::_QuerySearchResult::CardCollection_Impl__obj::colQuery(this1,body,_hx_not,results);
HXDLIN(  30)					goto _hx_goto_1;
            				}
            				if (  (_hx_switch_0==HX_("is",ea,5b,00,00)) ){
HXLINE(  27)					results = ::scryfall::search::cards::_QuerySearchResult::CardCollection_Impl__obj::isQuery(this1,body,_hx_not,results);
HXDLIN(  27)					goto _hx_goto_1;
            				}
            				if (  (_hx_switch_0==HX_("r",72,00,00,00)) ){
HXLINE(  29)					results = ::scryfall::search::cards::_QuerySearchResult::CardCollection_Impl__obj::rQuery(this1,body,_hx_not,results);
HXDLIN(  29)					goto _hx_goto_1;
            				}
            				if (  (_hx_switch_0==HX_("t",74,00,00,00)) ){
HXLINE(  28)					results = ::scryfall::search::cards::_QuerySearchResult::CardCollection_Impl__obj::tQuery(this1,body,_hx_not,results);
HXDLIN(  28)					goto _hx_goto_1;
            				}
            				_hx_goto_1:;
            			}
            		}
HXLINE(  34)		::scryfall::search::cards::_QuerySearchResult::CardCollection_Impl__obj::previousQuery = supQuery;
HXLINE(  35)		::scryfall::search::cards::_QuerySearchResult::CardCollection_Impl__obj::previousResult = results;
HXLINE(  36)		 ::scryfall::Card result = results->__get(::Std_obj::random(results->length)).StaticCast<  ::scryfall::Card >();
HXLINE(  37)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CardCollection_Impl__obj,randomQuery,return )

::Array< ::Dynamic> CardCollection_Impl__obj::isQuery(::Array< ::Dynamic> this1,::String body,::hx::Null< bool >  __o__hx_not,::Array< ::Dynamic> results){
            		bool _hx_not = __o__hx_not.Default(false);
            	HX_STACKFRAME(&_hx_pos_0dbac93d128095d9_40_isQuery)
HXDLIN(  40)		::String _hx_switch_0 = body;
            		if (  (_hx_switch_0==HX_("booster",50,ce,aa,82)) ){
HXLINE(  41)			::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  41)			{
HXLINE(  41)				int _g1 = 0;
HXDLIN(  41)				::Array< ::Dynamic> _g2 = results;
HXDLIN(  41)				while((_g1 < _g2->length)){
HXLINE(  41)					 ::scryfall::Card v = _g2->__get(_g1).StaticCast<  ::scryfall::Card >();
HXDLIN(  41)					_g1 = (_g1 + 1);
HXDLIN(  41)					if (::hx::IsEq( !(_hx_not),v->_struct->__Field(HX_("booster",50,ce,aa,82),::hx::paccDynamic) )) {
HXLINE(  41)						_g->push(v);
            					}
            				}
            			}
HXDLIN(  41)			return _g;
HXDLIN(  41)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("dfc",a1,3a,4c,00)) ){
HXLINE(  44)			::Array< ::Dynamic> _g3 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  44)			{
HXLINE(  44)				int _g4 = 0;
HXDLIN(  44)				::Array< ::Dynamic> _g5 = results;
HXDLIN(  44)				while((_g4 < _g5->length)){
HXLINE(  44)					 ::scryfall::Card v1 = _g5->__get(_g4).StaticCast<  ::scryfall::Card >();
HXDLIN(  44)					_g4 = (_g4 + 1);
HXDLIN(  44)					if ((!(_hx_not) == ::hx::IsNotNull( v1->_struct->__Field(HX_("card_faces",47,f6,4d,f8),::hx::paccDynamic) ))) {
HXLINE(  44)						_g3->push(v1);
            					}
            				}
            			}
HXDLIN(  44)			return _g3;
HXDLIN(  44)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("etched",33,1e,46,6e)) ||  (_hx_switch_0==HX_("foil",6c,59,c0,43)) ||  (_hx_switch_0==HX_("nonfoil",f9,3c,aa,d9)) ){
HXLINE(  47)			::Array< ::Dynamic> _g6 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  47)			{
HXLINE(  47)				int _g7 = 0;
HXDLIN(  47)				::Array< ::Dynamic> _g8 = results;
HXDLIN(  47)				while((_g7 < _g8->length)){
HXLINE(  47)					 ::scryfall::Card v2 = _g8->__get(_g7).StaticCast<  ::scryfall::Card >();
HXDLIN(  47)					_g7 = (_g7 + 1);
HXDLIN(  47)					if ((!(_hx_not) == ( (::Array< ::String >)(v2->_struct->__Field(HX_("finishes",81,93,0e,95),::hx::paccDynamic)) )->contains(body))) {
HXLINE(  47)						_g6->push(v2);
            					}
            				}
            			}
HXDLIN(  47)			return _g6;
HXDLIN(  47)			goto _hx_goto_3;
            		}
            		/* default */{
HXLINE(  50)			return results;
            		}
            		_hx_goto_3:;
HXLINE(  40)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CardCollection_Impl__obj,isQuery,return )

::Array< ::Dynamic> CardCollection_Impl__obj::tQuery(::Array< ::Dynamic> this1,::String body,::hx::Null< bool >  __o__hx_not,::Array< ::Dynamic> results){
            		bool _hx_not = __o__hx_not.Default(false);
            	HX_STACKFRAME(&_hx_pos_0dbac93d128095d9_54_tQuery)
HXDLIN(  54)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  54)		{
HXDLIN(  54)			int _g1 = 0;
HXDLIN(  54)			::Array< ::Dynamic> _g2 = results;
HXDLIN(  54)			while((_g1 < _g2->length)){
HXDLIN(  54)				 ::scryfall::Card v = _g2->__get(_g1).StaticCast<  ::scryfall::Card >();
HXDLIN(  54)				_g1 = (_g1 + 1);
HXDLIN(  54)				if ((!(_hx_not) == (v->get_typeLine().toLowerCase().indexOf(body,null()) != -1))) {
HXDLIN(  54)					_g->push(v);
            				}
            			}
            		}
HXDLIN(  54)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CardCollection_Impl__obj,tQuery,return )

::Array< ::Dynamic> CardCollection_Impl__obj::rQuery(::Array< ::Dynamic> this1,::String body,::hx::Null< bool >  __o__hx_not,::Array< ::Dynamic> results){
            		bool _hx_not = __o__hx_not.Default(false);
            	HX_STACKFRAME(&_hx_pos_0dbac93d128095d9_59_rQuery)
HXDLIN(  59)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  59)		{
HXDLIN(  59)			int _g1 = 0;
HXDLIN(  59)			::Array< ::Dynamic> _g2 = results;
HXDLIN(  59)			while((_g1 < _g2->length)){
HXDLIN(  59)				 ::scryfall::Card v = _g2->__get(_g1).StaticCast<  ::scryfall::Card >();
HXDLIN(  59)				_g1 = (_g1 + 1);
HXDLIN(  59)				if ((!(_hx_not) == (v->get_rarity() == body))) {
HXDLIN(  59)					_g->push(v);
            				}
            			}
            		}
HXDLIN(  59)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CardCollection_Impl__obj,rQuery,return )

::Array< ::Dynamic> CardCollection_Impl__obj::colQuery(::Array< ::Dynamic> this1,::String body,::hx::Null< bool >  __o__hx_not,::Array< ::Dynamic> results){
            		bool _hx_not = __o__hx_not.Default(false);
            	HX_STACKFRAME(&_hx_pos_0dbac93d128095d9_64_colQuery)
HXDLIN(  64)		::Array< ::Dynamic> _g = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN(  64)		{
HXDLIN(  64)			int _g1 = 0;
HXDLIN(  64)			::Array< ::Dynamic> _g2 = results;
HXDLIN(  64)			while((_g1 < _g2->length)){
HXDLIN(  64)				 ::scryfall::Card v = _g2->__get(_g1).StaticCast<  ::scryfall::Card >();
HXDLIN(  64)				_g1 = (_g1 + 1);
HXDLIN(  64)				if ((!(_hx_not) == v->get_colors()->contains(body))) {
HXDLIN(  64)					_g->push(v);
            				}
            			}
            		}
HXDLIN(  64)		return _g;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(CardCollection_Impl__obj,colQuery,return )


CardCollection_Impl__obj::CardCollection_Impl__obj()
{
}

bool CardCollection_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"tQuery") ) { outValue = tQuery_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"rQuery") ) { outValue = rQuery_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"isQuery") ) { outValue = isQuery_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"colQuery") ) { outValue = colQuery_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"randomQuery") ) { outValue = randomQuery_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CardCollection_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo CardCollection_Impl__obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &CardCollection_Impl__obj::previousQuery,HX_("previousQuery",51,97,de,84)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(void *) &CardCollection_Impl__obj::previousResult,HX_("previousResult",74,1c,1b,f7)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void CardCollection_Impl__obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CardCollection_Impl__obj::previousQuery,"previousQuery");
	HX_MARK_MEMBER_NAME(CardCollection_Impl__obj::previousResult,"previousResult");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CardCollection_Impl__obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CardCollection_Impl__obj::previousQuery,"previousQuery");
	HX_VISIT_MEMBER_NAME(CardCollection_Impl__obj::previousResult,"previousResult");
};

#endif

::hx::Class CardCollection_Impl__obj::__mClass;

static ::String CardCollection_Impl__obj_sStaticFields[] = {
	HX_("previousQuery",51,97,de,84),
	HX_("previousResult",74,1c,1b,f7),
	HX_("randomQuery",05,ae,7f,c8),
	HX_("isQuery",be,2e,70,fa),
	HX_("tQuery",f4,d5,7d,52),
	HX_("rQuery",36,1d,c7,85),
	HX_("colQuery",a8,92,f3,45),
	::String(null())
};

void CardCollection_Impl__obj::__register()
{
	CardCollection_Impl__obj _hx_dummy;
	CardCollection_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("scryfall.search.cards._QuerySearchResult.CardCollection_Impl_",19,31,47,a1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CardCollection_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CardCollection_Impl__obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CardCollection_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< CardCollection_Impl__obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CardCollection_Impl__obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CardCollection_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CardCollection_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CardCollection_Impl__obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0dbac93d128095d9_8_boot)
HXDLIN(   8)		previousQuery = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_0dbac93d128095d9_9_boot)
HXDLIN(   9)		previousResult = ::Array_obj< ::Dynamic>::__new(0);
            	}
}

} // end namespace scryfall
} // end namespace search
} // end namespace cards
} // end namespace _QuerySearchResult

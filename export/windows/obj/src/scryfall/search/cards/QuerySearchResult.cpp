// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_scryfall_Card
#include <scryfall/Card.h>
#endif
#ifndef INCLUDED_scryfall_List
#include <scryfall/List.h>
#endif
#ifndef INCLUDED_scryfall_Result
#include <scryfall/Result.h>
#endif
#ifndef INCLUDED_scryfall_search_ScrySearch
#include <scryfall/search/ScrySearch.h>
#endif
#ifndef INCLUDED_scryfall_search_cards_QuerySearchResult
#include <scryfall/search/cards/QuerySearchResult.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_017a1dfd8aa0999f_70_new,"scryfall.search.cards.QuerySearchResult","new",0xe920796a,"scryfall.search.cards.QuerySearchResult.new","scryfall/search/cards/QuerySearchResult.hx",70,0x7b1d21e7)
HX_LOCAL_STACK_FRAME(_hx_pos_017a1dfd8aa0999f_85_getCollection,"scryfall.search.cards.QuerySearchResult","getCollection",0xc93f441e,"scryfall.search.cards.QuerySearchResult.getCollection","scryfall/search/cards/QuerySearchResult.hx",85,0x7b1d21e7)
namespace scryfall{
namespace search{
namespace cards{

void QuerySearchResult_obj::__construct(::String url){
            	HX_STACKFRAME(&_hx_pos_017a1dfd8aa0999f_70_new)
HXLINE(  71)		this->pages = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  74)		 ::scryfall::List cardList = ::scryfall::search::ScrySearch_obj::getCardListFromURL(url);
HXLINE(  75)		this->pages->push(cardList);
HXLINE(  76)		while(::hx::IsNotNull( cardList->get_nextList() )){
HXLINE(  77)			cardList = cardList->get_nextList();
HXLINE(  78)			this->pages->push(cardList);
            		}
            	}

Dynamic QuerySearchResult_obj::__CreateEmpty() { return new QuerySearchResult_obj; }

void *QuerySearchResult_obj::_hx_vtable = 0;

Dynamic QuerySearchResult_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< QuerySearchResult_obj > _hx_result = new QuerySearchResult_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool QuerySearchResult_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x32f1acc8;
}

::Array< ::Dynamic> QuerySearchResult_obj::getCollection(){
            	HX_STACKFRAME(&_hx_pos_017a1dfd8aa0999f_85_getCollection)
HXLINE(  86)		::Array< ::Dynamic> cardArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  87)		{
HXLINE(  87)			int _g = 0;
HXDLIN(  87)			::Array< ::Dynamic> _g1 = this->pages;
HXDLIN(  87)			while((_g < _g1->length)){
HXLINE(  87)				 ::scryfall::List page = _g1->__get(_g).StaticCast<  ::scryfall::List >();
HXDLIN(  87)				_g = (_g + 1);
HXLINE(  88)				{
HXLINE(  88)					int _g2 = 0;
HXDLIN(  88)					::Array< ::Dynamic> _g3 = page->results;
HXDLIN(  88)					while((_g2 < _g3->length)){
HXLINE(  88)						 ::scryfall::Card card = _g3->__get(_g2).StaticCast<  ::scryfall::Card >();
HXDLIN(  88)						_g2 = (_g2 + 1);
HXLINE(  89)						cardArray->push(card);
            					}
            				}
            			}
            		}
HXLINE(  93)		return cardArray;
            	}


HX_DEFINE_DYNAMIC_FUNC0(QuerySearchResult_obj,getCollection,return )


::hx::ObjectPtr< QuerySearchResult_obj > QuerySearchResult_obj::__new(::String url) {
	::hx::ObjectPtr< QuerySearchResult_obj > __this = new QuerySearchResult_obj();
	__this->__construct(url);
	return __this;
}

::hx::ObjectPtr< QuerySearchResult_obj > QuerySearchResult_obj::__alloc(::hx::Ctx *_hx_ctx,::String url) {
	QuerySearchResult_obj *__this = (QuerySearchResult_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(QuerySearchResult_obj), true, "scryfall.search.cards.QuerySearchResult"));
	*(void **)__this = QuerySearchResult_obj::_hx_vtable;
	__this->__construct(url);
	return __this;
}

QuerySearchResult_obj::QuerySearchResult_obj()
{
}

void QuerySearchResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(QuerySearchResult);
	HX_MARK_MEMBER_NAME(pages,"pages");
	HX_MARK_END_CLASS();
}

void QuerySearchResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pages,"pages");
}

::hx::Val QuerySearchResult_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"pages") ) { return ::hx::Val( pages ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getCollection") ) { return ::hx::Val( getCollection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val QuerySearchResult_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"pages") ) { pages=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void QuerySearchResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pages",44,2b,4d,bd));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo QuerySearchResult_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(QuerySearchResult_obj,pages),HX_("pages",44,2b,4d,bd)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *QuerySearchResult_obj_sStaticStorageInfo = 0;
#endif

static ::String QuerySearchResult_obj_sMemberFields[] = {
	HX_("pages",44,2b,4d,bd),
	HX_("getCollection",94,2a,f5,8b),
	::String(null()) };

::hx::Class QuerySearchResult_obj::__mClass;

void QuerySearchResult_obj::__register()
{
	QuerySearchResult_obj _hx_dummy;
	QuerySearchResult_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("scryfall.search.cards.QuerySearchResult",78,3c,01,93);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(QuerySearchResult_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< QuerySearchResult_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = QuerySearchResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = QuerySearchResult_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace scryfall
} // end namespace search
} // end namespace cards

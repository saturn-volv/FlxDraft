// Generated by Haxe 4.3.2
#include <hxcpp.h>

#ifndef INCLUDED_flixel_graphics_tile_FlxGraphicsShader
#include <flixel/graphics/tile/FlxGraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_GraphicsShader
#include <openfl/display/GraphicsShader.h>
#endif
#ifndef INCLUDED_openfl_display_Shader
#include <openfl/display/Shader.h>
#endif
#ifndef INCLUDED_openfl_display_ShaderParameter_Float
#include <openfl/display/ShaderParameter_Float.h>
#endif
#ifndef INCLUDED_shaders_vertex_VertexTransformShader
#include <shaders/vertex/VertexTransformShader.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a1f0ade0a25bc6dc_58_new,"shaders.vertex.VertexTransformShader","new",0x09023f35,"shaders.vertex.VertexTransformShader.new","shaders/vertex/VertexTransformShader.hx",58,0xc9342ffb)
static const Float _hx_array_data_6b6380c3_1[] = {
	0.0,
};
static const Float _hx_array_data_6b6380c3_2[] = {
	1.0,0.0,0.0,
};
static const Float _hx_array_data_6b6380c3_3[] = {
	0.0,1.0,0.0,
};
static const Float _hx_array_data_6b6380c3_4[] = {
	0.0,0.0,0.0,
};
static const Float _hx_array_data_6b6380c3_5[] = {
	0.0,0.0,1.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_a1f0ade0a25bc6dc_67_update,"shaders.vertex.VertexTransformShader","update",0xe15a4a54,"shaders.vertex.VertexTransformShader.update","shaders/vertex/VertexTransformShader.hx",67,0xc9342ffb)
namespace shaders{
namespace vertex{

void VertexTransformShader_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a1f0ade0a25bc6dc_58_new)
HXLINE( 182)		if (::hx::IsNull( this->_hx___glFragmentSource )) {
HXLINE( 184)			this->_hx___glFragmentSource = HX_("\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\n\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\tgl_FragColor = flixel_texture2D(bitmap, openfl_TextureCoordv);\n\t\t}",71,0e,7a,59);
            		}
HXLINE( 174)		if (::hx::IsNull( this->_hx___glVertexSource )) {
HXLINE( 176)			this->_hx___glVertexSource = HX_("\r\n\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\r\n\r\n\tattribute float alpha;\r\n\tattribute vec4 colorMultiplier;\r\n\tattribute vec4 colorOffset;\r\n\tuniform bool hasColorTransform;\r\n\r\n\tuniform float iTime;\r\n\t\r\n\tuniform vec3 tX;\r\n\tuniform vec3 tY;\r\n\tuniform vec3 tZ;\r\n\tuniform vec3 tT;\r\n\r\n\tvoid main(void)\r\n\t{\r\n\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\r\n        openfl_Alphav = openfl_Alpha;\r\n        openfl_TextureCoordv = openfl_TextureCoord;\r\n        if (openfl_HasColorTransform) {\r\n            openfl_ColorMultiplierv = openfl_ColorMultiplier;\r\n            openfl_ColorOffsetv = openfl_ColorOffset / 255.0;\r\n        }\r\n        \r\n        mat4 transformMatrix = openfl_Matrix * mat4(\r\n\t\tvec4( tX.x, tX.y, tX.z, 0.0 ),\r\n\t\tvec4( tY.x, tY.y, tY.z, 0.0 ),\r\n\t\tvec4( tZ.x, tZ.y, tZ.z, 0.0 ),\r\n\t\tvec4( tT.x, tT.y, tT.z, 1.0 ));\r\n\t\t\r\n\t    gl_Position = transformMatrix * openfl_Position;\r\n    \r\n\t\t\r\n\t\t// start of default code required for alpha and color to work \r\n\t\topenfl_Alphav = openfl_Alpha * alpha;\r\n\t\tif (hasColorTransform)\r\n\t\t{\r\n\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\r\n\t\t\topenfl_ColorMultiplierv = colorMultiplier;\r\n\t\t}\r\n\t\t// end of default code\r\n\t}",f5,f1,5c,8a);
            		}
HXLINE(  59)		super::__construct();
HXLINE(  60)		this->iTime->value = ::Array_obj< Float >::fromData( _hx_array_data_6b6380c3_1,1);
HXLINE(  61)		this->tX->value = ::Array_obj< Float >::fromData( _hx_array_data_6b6380c3_2,3);
HXLINE(  62)		this->tY->value = ::Array_obj< Float >::fromData( _hx_array_data_6b6380c3_3,3);
HXLINE(  63)		this->tZ->value = ::Array_obj< Float >::fromData( _hx_array_data_6b6380c3_4,3);
HXLINE(  64)		this->tT->value = ::Array_obj< Float >::fromData( _hx_array_data_6b6380c3_5,3);
HXLINE(  13)		this->_hx___isGenerated = true;
HXDLIN(  13)		this->_hx___initGL();
            	}

Dynamic VertexTransformShader_obj::__CreateEmpty() { return new VertexTransformShader_obj; }

void *VertexTransformShader_obj::_hx_vtable = 0;

Dynamic VertexTransformShader_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VertexTransformShader_obj > _hx_result = new VertexTransformShader_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VertexTransformShader_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x1efca5b6) {
		if (inClassId<=(int)0x04f93fcd) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x04f93fcd;
		} else {
			return inClassId==(int)0x1efca5b6;
		}
	} else {
		return inClassId==(int)0x27c92f5f || inClassId==(int)0x78d8d737;
	}
}

void VertexTransformShader_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_a1f0ade0a25bc6dc_67_update)
HXLINE(  68)		::Array< Float > base = this->iTime->value;
HXDLIN(  68)		int _hx_tmp = 0;
HXDLIN(  68)		base[_hx_tmp] = (base->__get(_hx_tmp) + elapsed);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VertexTransformShader_obj,update,(void))


::hx::ObjectPtr< VertexTransformShader_obj > VertexTransformShader_obj::__new() {
	::hx::ObjectPtr< VertexTransformShader_obj > __this = new VertexTransformShader_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< VertexTransformShader_obj > VertexTransformShader_obj::__alloc(::hx::Ctx *_hx_ctx) {
	VertexTransformShader_obj *__this = (VertexTransformShader_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VertexTransformShader_obj), true, "shaders.vertex.VertexTransformShader"));
	*(void **)__this = VertexTransformShader_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VertexTransformShader_obj::VertexTransformShader_obj()
{
}

void VertexTransformShader_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VertexTransformShader);
	HX_MARK_MEMBER_NAME(iTime,"iTime");
	HX_MARK_MEMBER_NAME(tX,"tX");
	HX_MARK_MEMBER_NAME(tY,"tY");
	HX_MARK_MEMBER_NAME(tZ,"tZ");
	HX_MARK_MEMBER_NAME(tT,"tT");
	 ::flixel::graphics::tile::FlxGraphicsShader_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void VertexTransformShader_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(iTime,"iTime");
	HX_VISIT_MEMBER_NAME(tX,"tX");
	HX_VISIT_MEMBER_NAME(tY,"tY");
	HX_VISIT_MEMBER_NAME(tZ,"tZ");
	HX_VISIT_MEMBER_NAME(tT,"tT");
	 ::flixel::graphics::tile::FlxGraphicsShader_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val VertexTransformShader_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"tX") ) { return ::hx::Val( tX ); }
		if (HX_FIELD_EQ(inName,"tY") ) { return ::hx::Val( tY ); }
		if (HX_FIELD_EQ(inName,"tZ") ) { return ::hx::Val( tZ ); }
		if (HX_FIELD_EQ(inName,"tT") ) { return ::hx::Val( tT ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"iTime") ) { return ::hx::Val( iTime ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VertexTransformShader_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"tX") ) { tX=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tY") ) { tY=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tZ") ) { tZ=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tT") ) { tT=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"iTime") ) { iTime=inValue.Cast<  ::openfl::display::ShaderParameter_Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VertexTransformShader_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("iTime",16,e1,e8,ac));
	outFields->push(HX_("tX",64,65,00,00));
	outFields->push(HX_("tY",65,65,00,00));
	outFields->push(HX_("tZ",66,65,00,00));
	outFields->push(HX_("tT",60,65,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VertexTransformShader_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(VertexTransformShader_obj,iTime),HX_("iTime",16,e1,e8,ac)},
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(VertexTransformShader_obj,tX),HX_("tX",64,65,00,00)},
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(VertexTransformShader_obj,tY),HX_("tY",65,65,00,00)},
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(VertexTransformShader_obj,tZ),HX_("tZ",66,65,00,00)},
	{::hx::fsObject /*  ::openfl::display::ShaderParameter_Float */ ,(int)offsetof(VertexTransformShader_obj,tT),HX_("tT",60,65,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *VertexTransformShader_obj_sStaticStorageInfo = 0;
#endif

static ::String VertexTransformShader_obj_sMemberFields[] = {
	HX_("update",09,86,05,87),
	HX_("iTime",16,e1,e8,ac),
	HX_("tX",64,65,00,00),
	HX_("tY",65,65,00,00),
	HX_("tZ",66,65,00,00),
	HX_("tT",60,65,00,00),
	::String(null()) };

::hx::Class VertexTransformShader_obj::__mClass;

void VertexTransformShader_obj::__register()
{
	VertexTransformShader_obj _hx_dummy;
	VertexTransformShader_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("shaders.vertex.VertexTransformShader",c3,80,63,6b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VertexTransformShader_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VertexTransformShader_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VertexTransformShader_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VertexTransformShader_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace shaders
} // end namespace vertex

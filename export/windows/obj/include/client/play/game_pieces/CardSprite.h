// Generated by Haxe 4.3.2
#ifndef INCLUDED_client_play_game_pieces_CardSprite
#define INCLUDED_client_play_game_pieces_CardSprite

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
HX_DECLARE_CLASS3(client,play,game_pieces,CardSprite)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(scryfall,Card)
HX_DECLARE_CLASS1(scryfall,Result)

namespace client{
namespace play{
namespace game_pieces{


class HXCPP_CLASS_ATTRIBUTES CardSprite_obj : public  ::flixel::FlxSprite_obj
{
	public:
		typedef  ::flixel::FlxSprite_obj super;
		typedef CardSprite_obj OBJ_;
		CardSprite_obj();

	public:
		enum { _hx_ClassId = 0x0d40e604 };

		void __construct( ::scryfall::Card card, ::Dynamic graphic);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="client.play.game_pieces.CardSprite")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"client.play.game_pieces.CardSprite"); }
		static ::hx::ObjectPtr< CardSprite_obj > __new( ::scryfall::Card card, ::Dynamic graphic);
		static ::hx::ObjectPtr< CardSprite_obj > __alloc(::hx::Ctx *_hx_ctx, ::scryfall::Card card, ::Dynamic graphic);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CardSprite_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CardSprite",15,ae,f9,ef); }

		static void __boot();
		static Float cardWidth;
		static Float cardHeight;
		static  ::client::play::game_pieces::CardSprite generateShowcaseCard( ::client::play::game_pieces::CardSprite cardSpr);
		static ::Dynamic generateShowcaseCard_dyn();

		 ::scryfall::Card _card;
		Float prevWidth;
		 ::Dynamic _cardWidth;
		int _gameIndex;
		bool showcase;
		bool set_showcase(bool v);
		::Dynamic set_showcase_dyn();

		bool hovering;
		int set__gameIndex(int index);
		::Dynamic set__gameIndex_dyn();

		void update(Float elapsed);

		void offHover();
		::Dynamic offHover_dyn();

		void onHover();
		::Dynamic onHover_dyn();

};

} // end namespace client
} // end namespace play
} // end namespace game_pieces

#endif /* INCLUDED_client_play_game_pieces_CardSprite */ 

// Generated by Haxe 4.3.2
#ifndef INCLUDED_client_play_CardState
#define INCLUDED_client_play_CardState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS2(client,play,CardState)
HX_DECLARE_CLASS3(client,play,game_pieces,CardSprite)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,group,FlxTypedSpriteGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(scryfall,Card)
HX_DECLARE_CLASS1(scryfall,Result)

namespace client{
namespace play{


class HXCPP_CLASS_ATTRIBUTES CardState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef CardState_obj OBJ_;
		CardState_obj();

	public:
		enum { _hx_ClassId = 0x06a740be };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="client.play.CardState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"client.play.CardState"); }
		static ::hx::ObjectPtr< CardState_obj > __new();
		static ::hx::ObjectPtr< CardState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CardState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CardState",01,96,c3,78); }

		static void __boot();
		static int MARGIN_X;
		static int MARGIN_Y;
		 ::flixel::group::FlxTypedSpriteGroup cards;
		 ::client::play::game_pieces::CardSprite selectedCard;
		void create();

		 ::client::play::game_pieces::CardSprite addCard( ::scryfall::Card card);
		::Dynamic addCard_dyn();

		void update(Float elapsed);

};

} // end namespace client
} // end namespace play

#endif /* INCLUDED_client_play_CardState */ 

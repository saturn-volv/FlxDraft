// Generated by Haxe 4.3.2
#ifndef INCLUDED_scryfall_Result
#define INCLUDED_scryfall_Result

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(scryfall,Result)

namespace scryfall{


class HXCPP_CLASS_ATTRIBUTES Result_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Result_obj OBJ_;
		Result_obj();

	public:
		enum { _hx_ClassId = 0x593034cf };

		void __construct( ::Dynamic object);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="scryfall.Result")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"scryfall.Result"); }

		//~Result_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Result",fd,dc,18,3d); }

		 ::Dynamic _struct;
};

} // end namespace scryfall

#endif /* INCLUDED_scryfall_Result */ 

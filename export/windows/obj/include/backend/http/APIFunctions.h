// Generated by Haxe 4.3.2
#ifndef INCLUDED_backend_http_APIFunctions
#define INCLUDED_backend_http_APIFunctions

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(backend,http,APIFunctions)

namespace backend{
namespace http{


class HXCPP_CLASS_ATTRIBUTES APIFunctions_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef APIFunctions_obj OBJ_;
		APIFunctions_obj();

	public:
		enum { _hx_ClassId = 0x195d6df9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="backend.http.APIFunctions")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"backend.http.APIFunctions"); }

		inline static ::hx::ObjectPtr< APIFunctions_obj > __new() {
			::hx::ObjectPtr< APIFunctions_obj > __this = new APIFunctions_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< APIFunctions_obj > __alloc(::hx::Ctx *_hx_ctx) {
			APIFunctions_obj *__this = (APIFunctions_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(APIFunctions_obj), false, "backend.http.APIFunctions"));
			*(void **)__this = APIFunctions_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~APIFunctions_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("APIFunctions",81,72,2e,22); }

		static void __boot();
		static ::Dynamic requestFromURL;
		static inline ::Dynamic &requestFromURL_dyn() {return requestFromURL; }

};

} // end namespace backend
} // end namespace http

#endif /* INCLUDED_backend_http_APIFunctions */ 
